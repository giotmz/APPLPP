const pacientes = [];
function ocultarTodasAsSecoes() {
  document.querySelectorAll("section").forEach(sec => sec.style.display = "none");
  document.querySelector(".pacientes-section").style.display = "block";
}
document.addEventListener("DOMContentLoaded", () => {
  ocultarTodasAsSecoes();
});

let pacienteAtualIndex = -1;

function mostrarCadastro() {
  ocultarTodasAsSecoes();
  document.getElementById("cadastroSection").style.display = "block";
}

document.getElementById("pacienteForm").addEventListener("submit", function (event) {
  event.preventDefault();

  const nome = document.getElementById("nomePaciente").value;
  const prontuario = document.getElementById("prontuarioPaciente").value;

  pacientes.push({ nome, prontuario });
  pacienteAtualIndex = pacientes.length - 1;

  event.target.reset();
  document.getElementById("cadastroSection").style.display = "none";
  document.getElementById("admissaoSection").style.display = "block";
});

document.getElementById("admissaoForm").addEventListener("submit", function (event) {
  event.preventDefault();

  const comorbidades = [...document.querySelectorAll('input[name="comorbidades"]:checked')].map(el => el.value);
  const estado = [...document.querySelectorAll('input[name="estado"]:checked')].map(el => el.value);
  const dispositivos = [...document.querySelectorAll('input[name="dispositivos"]:checked')].map(el => el.value);

  const paciente = pacientes[pacienteAtualIndex];
  paciente.comorbidades = comorbidades;
  paciente.estado = estado;
  paciente.dispositivos = dispositivos;

  alert("Admiss√£o realizada com sucesso.");
  document.getElementById("admissaoSection").style.display = "none";

  // Mostra pr√≥ximas se√ß√µes
  document.querySelector(".braden-section").style.display = "block";
  document.querySelector(".lesao-section").style.display = "block";
  document.querySelector(".alarme-section").style.display = "block";
});

function calcularPontuacao() {
  const inputs = document.querySelectorAll(".braden-section input[type='number']");
  let total = 0;
  let dados = {};

  inputs.forEach((input, i) => {
    const valor = parseInt(input.value);
    if (!isNaN(valor)) {
      total += valor;
      const key = input.previousSibling.textContent.trim().toLowerCase().replace(/[^a-z]/gi, '');
      dados[key] = valor;
    }
  });

  let risco = "Alto risco";
  if (total >= 19) risco = "Sem risco";
  else if (total >= 15) risco = "M√©dio Risco";
  else if (total >= 13) risco = "Risco moderado";
  else if (total >=10) risco = "Alto Risco";
  else if (total >=9) risco = "Alt√≠ssimo Risco";

  pacientes[pacienteAtualIndex].braden = dados;
  pacientes[pacienteAtualIndex].bradenPontuacao = total;
  pacientes[pacienteAtualIndex].bradenRisco = risco;

  alert(`Pontua√ß√£o total: ${total}\nClassifica√ß√£o: ${risco}`);
  atualizarListaPacientes();
}

function marcarLesao(posicao) {
  if (!pacientes[pacienteAtualIndex].lesoes) pacientes[pacienteAtualIndex].lesoes = [];
  pacientes[pacienteAtualIndex].lesoes.push(posicao);
  alert(`Les√£o marcada na ${posicao}`);
  atualizarListaPacientes();
}

let alarmeIntervalo;
function ativarAlarme() {
  const paciente = pacientes[pacienteAtualIndex];
  if (!paciente.alarmeAtivo) {
    paciente.alarmeAtivo = true;
    paciente.alarmeInicio = new Date(); 
    paciente.alarmeTimer = setInterval(() => {
      alert(`üîî Aten√ß√£o: chegou o momento de mudar o dec√∫bito do paciente ${paciente.nome}.\n(Recomenda√ß√£o: mudan√ßa a cada 2 horas)`);
    }, 2 * 60 * 60 * 1000); // 2 horas
    alert(`Alarme de mudan√ßa de dec√∫bito ativado para o paciente ${paciente.nome}.`);
  } else {
    clearInterval(paciente.alarmeTimer);
    paciente.alarmeAtivo = false;
    alert(`Alarme de mudan√ßa de dec√∫bito desativado para o paciente ${paciente.nome}.`);
  }
}

function atualizarListaPacientes() {
  const lista = document.getElementById("listaPacientes");
  lista.innerHTML = "";

  pacientes.forEach((p, index) => {
    const comorbidades = p.comorbidades?.join(", ") || "N√£o informado";
    const estado = p.estado?.join(", ") || "N√£o informado";
    const dispositivos = p.dispositivos?.join(", ") || "N√£o informado";
    const risco = p.bradenRisco || "N√£o avaliado";
    const lesoes = p.lesoes?.join(", ") || "Nenhuma";

    const li = document.createElement("li");
    li.innerHTML = `
      <div>
        <strong>${p.nome}</strong><br>
        Prontu√°rio: ${p.prontuario}<br>
        <small><strong>Comorbidades:</strong> ${comorbidades}</small><br>
        <small><strong>Estado:</strong> ${estado}</small><br>
        <small><strong>Dispositivos:</strong> ${dispositivos}</small><br>
        <small><strong>Braden:</strong> ${risco}</small><br>
        <small><strong>Les√µes:</strong> ${lesoes}</small>
      </div>
      <div>
        <button onclick="abrirHistorico(${index})">Hist√≥rico</button>
${pacientes[index].tratamentoAplicado ? `<button onclick="darAlta(${index})">Dar alta</button>` : `<span style="color: red;">Tratamento pendente</span>`}



      </div>
    `;
    lista.appendChild(li);
  });
}

function selecionarPaciente(index) {
  pacienteAtualIndex = index;
  document.querySelector(".braden-section").style.display = "block";
  document.querySelector(".lesao-section").style.display = "block";
  document.querySelector(".alarme-section").style.display = "block";
  document.getElementById("cadastroSection").style.display = "none";
  document.getElementById("admissaoSection").style.display = "none";
}

function darAlta(index) {
  if (confirm("Deseja realmente dar alta a este paciente?")) {
    pacientes.splice(index, 1);
    atualizarListaPacientes();
  }
}

function abrirHistorico(index) {
  pacienteAtualIndex = index;
  const p = pacientes[pacienteAtualIndex];

  let alarmeInfo = "Alarme n√£o ativado.";
  if (p.alarmeAtivo && p.alarmeInicio) {
    const agora = new Date();
    const ativado = new Date(p.alarmeInicio);
    const tempoHoras = Math.floor((agora - ativado) / (1000 * 60 * 60));
    const mudancas = Math.floor(tempoHoras / 2);
    alarmeInfo = `Alarme de Dec√∫bito:<br>
    Alarme ativado desde: ${ativado.toLocaleString()}<br>
    `;
  }

  const historico = `
    <strong>${p.nome}</strong><br>
    Prontu√°rio: ${p.prontuario}<br>
    <strong>Comorbidades:</strong> ${p.comorbidades?.join(", ") || "N√£o informado"}<br>
    <strong>Estado Atual:</strong> ${p.estado?.join(", ") || "N√£o informado"}<br>
    <strong>Dispositivos:</strong> ${p.dispositivos?.join(", ") || "N√£o informado"}<br>
    <strong>Braden:</strong> ${p.bradenRisco || "N√£o avaliado"}<br>
    <strong>Les√µes:</strong> ${p.lesoes?.join(", ") || "Nenhuma"}<br>
    <strong>Tratamento Aplicado:</strong> ${p.tratamentoAplicado ? "Sim" : "N√£o"}<br>
    <strong>Conduta do Profissional:</strong> ${p.conduta || "N√£o registrada"}<br><br>
    ${alarmeInfo}
  `;

  document.getElementById("historicoDetalhes").innerHTML = historico;
  ocultarTodasAsSecoes();
  document.querySelector(".historico-section").style.display = "block";
}

function abrirAvaliacaoLesao() {
  ocultarTodasAsSecoes();
  document.querySelector(".avaliacao-lesao-section").style.display = "block";
}

function abrirTratamento() {
  const estagio = document.getElementById("estagioLesao").value;
  const tratamentoConteudo = document.getElementById("tratamentoConteudo");

  if (!estagio) {
    alert("Selecione um est√°gio da les√£o.");
    return;
  }

  pacientes[pacienteAtualIndex].estagioLesao = estagio;

  const planos = {
    I: `
      <h4>Est√°gio I</h4>
      <p><strong>Materiais:</strong> Espuma de Hidropol√≠mero, Hidrocol√≥ide transparente, Filme transparente.</p>
      <p><strong>Cuidados:</strong></p>
      <ul>
        <li>Diferenciar de Dermatite Associada √† Incontin√™ncia (DAI)</li>
        <li>Diminuir for√ßas de press√£o, fric√ß√£o e cisalhamento</li>
        <li>Proteger contra umidade</li>
        <li>Permitir visualiza√ß√£o da les√£o sem retirada da cobertura</li>
      </ul>
    `,
    II: `
      <h4>Est√°gio II</h4>
      <p><strong>Materiais:</strong> Espuma de Hidropol√≠mero, Hidrocol√≥ide.</p>
      <p><strong>Cuidados:</strong></p>
      <ul>
        <li>Absorver exsudato leve/m√©dio</li>
        <li>Reduzir press√£o, fric√ß√£o e cisalhamento</li>
        <li>Barreira contra umidade, bact√©rias e v√≠rus</li>
      </ul>
    `,
    III: `
      <h4>Est√°gio III</h4>
      <p><strong>Cobertura prim√°ria:</strong> Hidrofibra com prata, Alginato de c√°lcio e s√≥dio, Carv√£o ativado com prata, Espuma de poliuretano com prata</p>
      <p><strong>Cobertura secund√°ria:</strong> Espuma de hidropol√≠mero</p>
      <p><strong>Cuidados:</strong></p>
      <ul>
        <li>Absor√ß√£o de exsudato moderado</li>
        <li>Preenchimento de cavidade</li>
        <li>Controle bacteriano e viral</li>
        <li>Redu√ß√£o da press√£o e fric√ß√£o</li>
      </ul>
    `,
    IV: `
      <h4>Est√°gio IV</h4>
      <p><strong>Cobertura prim√°ria:</strong> Hidrofibra com prata, Alginato de c√°lcio e s√≥dio, Carv√£o ativado com prata, Espuma de poliuretano</p>
      <p><strong>Cobertura secund√°ria:</strong> Gaze ou coxim (troca di√°ria)</p>
      <p><strong>Cuidados:</strong></p>
      <ul>
        <li>Absor√ß√£o de exsudato elevado</li>
        <li>Preenchimento de 70% da cavidade</li>
        <li>Redu√ß√£o de press√£o e controle de infec√ß√£o</li>
      </ul>
    `,
    "N√£o Classific√°vel": `
      <h4>Les√£o N√£o Classific√°vel</h4>
      <p><strong>Desbridamento autol√≠tico:</strong> Hidrocol√≥ide, Hidrogel</p>
      <p><strong>Desbridamento enzim√°tico:</strong> Colagenase</p>
      <p><strong>Observa√ß√£o:</strong> Avaliar necessidade de desbridamento cir√∫rgico.</p>
    `,
    "Press√£o Tissular Profunda": `
      <h4>Les√£o por Press√£o Tissular Profunda</h4>
      <ul>
        <li>Hidratar a pele</li>
        <li>N√£o aplicar cobertura para permitir observa√ß√£o</li>
        <li>Calc√¢neos devem ficar flutuantes</li>
        <li>Rompimento de flictema se exsudato purulento</li>
      </ul>
    `,
    "Relacionada a Dispositivos M√©dicos": `
      <h4>Les√£o Relacionada a Dispositivos M√©dicos</h4>
      <ul>
        <li>Preven√ß√£o com hidrocol√≥ide ou espuma de hidropol√≠mero</li>
        <li>Reduzir press√£o de dispositivos</li>
        <li>Utilizar fixadores adesivos espec√≠ficos</li>
        <li>Tratar les√£o conforme avalia√ß√£o do enfermeiro</li>
      </ul>
    `,
    "Press√£o em Membranas Mucosas": `
      <h4>Les√£o em Membranas Mucosas</h4>
      <p><strong>Conduta:</strong> Regenera√ß√£o natural, avaliar com cuidado. Tratamento conforme julgamento cl√≠nico do enfermeiro.</p>
    `
  };

  tratamentoConteudo.innerHTML = planos[estagio] || "<p>Tratamento n√£o encontrado para este est√°gio.</p>";
  document.getElementById("condutaProfissional").value = "";

  ocultarTodasAsSecoes();
  document.querySelector(".tratamento-lesao-section").style.display = "block";
}


function finalizarTratamento() {
  const conduta = document.getElementById("condutaProfissional").value.trim();
  if (!conduta) {
    alert("Descreva a conduta do profissional antes de finalizar o tratamento.");
    return;
  }

  pacientes[pacienteAtualIndex].tratamentoAplicado = true;
  pacientes[pacienteAtualIndex].conduta = conduta;

  alert("Tratamento aplicado com sucesso.");
  atualizarListaPacientes();
  ocultarTodasAsSecoes();
  document.querySelector(".pacientes-section").style.display = "block";
}


function ocultarTodasAsSecoes() {
  document.querySelectorAll("section").forEach(sec => sec.style.display = "none");
  document.querySelector(".pacientes-section").style.display = "block";
}
